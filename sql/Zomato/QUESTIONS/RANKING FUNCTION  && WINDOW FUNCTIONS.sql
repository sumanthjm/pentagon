-- RANKING FUNCTION / WINDOW FUNCTIONS
-- ----------------------------------------
-- IT IS USED TO ASSIGN RANK FOR ALL THE RECORDS IN A TABLE.

-- SYNTAX:

-- SELECT RANKING_FUNCTION() OVER(PARTITION BY COLUMN_NAME ORDER BY COLUMN_NAME ASC/DESC)
-- FROM TABLE_NAME;

-- OVER: IT IS A CLAUSE USED TO PASS RANKING FUNCTIONS INSIDE SELECT CLAUSE.

-- PARTITION BY : IT IS A CLAUSE USED TO CREATE GROUPS,IT RESETS THE RANK AFTER EACH GROUP.

-- TYPES OF RANKING FUNCTINS
-- -------------------------
-- 1.ROW_NUMBEER()
-- 2.RANK()
-- 3.DENSE_RANK()

-- 1.ROW_NUMBEER()
-- ------------------
-- IT IS USED TO ASSIGN UNIQUE RECORDS FOR ALL THE RECORDS

-- SYNTAX:
-- ------

-- SELECT ROW_NUMBER() OVER(PARTITION BY COLUMN_NAME ORDER BY COLUMN_NAME ASC/DESC)
-- FROM TABLE_NAME;

SELECT FNAME,JOB,SAL,ROW_NUMBER() OVER(PARTITION BY JOB ORDER BY SAL DESC) AS 'RANK'
FROM EMPS;

-- DRAWBACK:
-- IT WILL ASSIGN DIFFERENT RANK FOR SAME RECORDS (SAME SAL)


-- 2.RANK()
-- -------------
-- IT IS USED TO ASSIGN RANK FOR ALL TE RECORDS IN A TABLE

-- ADVANTAGE:
-- ----------
-- >  IT WILL ASSIGN SAME RANK FOR SAME RECORDS (SAME SAL)

-- SYNTAX:
-- -------
-- SELECT RANK() OVER(PARTITION BY COLUMN_NAME ORDER BY COLUMN_NAME ASC/DESC)
-- FROM TABLE_NAME;

-- EX:
SELECT FNAME,JOB,SAL,RANK() OVER( ORDER BY SAL DESC) AS 'RANK'
FROM EMPS; -- IT WILL SAME RANK FOR SAME RECORDS BUT IT SKIPS THE NEXT RANKING NUMBER
           -- EXAMPLE WE WILL SEE IN {{{{{ DREAM 11 RANK }}}}}}}



-- 3.DENSE_RANK()
------------------

-- IT WILL ASSIGN SAME RANK FOR TIED RECORDS ALSO IT REMAINS NEXT RANKING NUMBER IN SEQUESNTIAL ORDER 

-- SYNTAX:
-- SELECT DENSE_RANK() OVER(PARTITION BY COLUMN_NAME ORDER BY COLUMN_NAME ASC/DESC)
-- FROM TABLE_NAME; 

SELECT FNAME,JOB,SAL,DENSE_RANK() OVER( ORDER BY SAL DESC) AS 'RANK'
FROM EMPS; -- IT WILL SAME RANK FOR SAME RECORDS AND IT WILL NOT  SKIPS THE NEXT RANKING NUMBER










