// TicketBooking class with synchronized booking method
class TicketBooking {
    private int availableTickets;

    public TicketBooking(int totalTickets) {
        this.availableTickets = totalTickets;
    }

    // Synchronized method to prevent race conditions
    public synchronized void bookTicket(String userName, int requestedTickets) {
        System.out.println(userName + " is trying to book " + requestedTickets + " ticket(s)...");

        if (requestedTickets <= availableTickets) {
            System.out.println("Booking successful for " + userName);
            availableTickets -= requestedTickets;
            System.out.println("Tickets remaining: " + availableTickets + "\n");
        } else {
            System.out.println("Booking failed for " + userName + " - Not enough tickets.\n");
        }
    }
}
// Each user runs in a separate thread
class UserThread extends Thread {
    private TicketBooking ticketBooking;
    private String userName;
    private int ticketsToBook;

    public UserThread(TicketBooking ticketBooking, String userName, int ticketsToBook) {
        this.ticketBooking = ticketBooking;
        this.userName = userName;
        this.ticketsToBook = ticketsToBook;
    }

    @Override
    public void run() {
        ticketBooking.bookTicket(userName, ticketsToBook);
    }
}
public class Main {
    public static void main(String[] args) {
        System.out.println("---- Online Ticket Booking System ----\n");

        // Total tickets available
        TicketBooking bookingSystem = new TicketBooking(5);

        // Users trying to book tickets
        UserThread user1 = new UserThread(bookingSystem, "Alice", 2);
        UserThread user2 = new UserThread(bookingSystem, "Bob", 2);
        UserThread user3 = new UserThread(bookingSystem, "Charlie", 2);

        // Start booking threads
        user1.start();
        user2.start();
        user3.start();
    }
}
